//
// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
@import "./functions";
@import "./mixins";
@import "./variables";
@import "@material/animation/variables";
@import "@material/ripple/common";
@import "@material/ripple/mixins";
@import "@material/rtl/mixins";
@import "@material/theme/variables";
@import "@material/theme/mixins";
@import "@material/typography/mixins";
@import "@material/typography/variables";
@import "./bottom-line/mdc-text-field-bottom-line";
@import "./helper-text/mdc-text-field-helper-text";
@import "./icon/mdc-text-field-icon";
@import "./label/mdc-text-field-label";
@include mdc-text-field-invalid-label-shake-keyframes_(standard, 100%);
@include mdc-text-field-invalid-label-shake-keyframes_(box, 50%); // postcss-bem-linter: define text-field

.text-field {
    display: inline-block;
    position: relative;
    margin-bottom: 8px;
    will-change: opacity, transform, color;

    .input {
        @include mdc-theme-prop(color, text-primary-on-light);
        @include mdc-typography-base;
        // We use only a subset of the MDC typography values here as changing things such as line-height
        // affects how the labels are transformed.
        // TODO: Re-add setting the font-size from mdc-typography-styles (currently
        // setting it here has no effect because it is overriden by the font-size
        // given below).
        @each $prop in (letter-spacing) {
            #{$prop}: map-get(map-get($mdc-typography-styles, subheading2), $prop);
        }
        width: 100%;
        padding: 0 0 8px;
        transition: mdc-text-field-transition(opacity);
        border: none;
        border-bottom: 1px solid $mdc-text-field-underline-on-light-idle;
        border-radius: 0;
        background: none;
        font-size: inherit;
        appearance: none;

        &::placeholder {
            @include mdc-theme-prop(color, text-hint-on-light);
            transition: mdc-text-field-transition(color);
            opacity: 1;
        }

        &:hover {
            border-color: $mdc-text-field-underline-on-light;
        }

        &:focus {
            outline: none;

            &::placeholder {
                @include mdc-theme-prop(color, $mdc-text-field-light-placeholder);
            }
        }
        // Remove red outline on firefox
        &:invalid {
            box-shadow: none;
        }
        @include mdc-theme-dark {
            @include mdc-theme-prop(color, text-primary-on-dark);
            border-bottom: 1px solid $mdc-text-field-underline-on-dark-idle;

            &:hover {
                border-bottom: 1px solid $mdc-text-field-underline-on-dark;
            }

            &::placeholder {
                @include mdc-theme-prop(color, text-hint-on-dark);
            }

            &:focus::placeholder {
                @include mdc-theme-prop(color, $mdc-text-field-dark-placeholder);
            }
        }
    }
    // Move label when text-field gets autofilled in Chrome
    .input {
        // stylelint-disable plugin/selector-bem-pattern
        &:-webkit-autofill + .label {
            transform: translateY(-100%) scale(.75, .75);
            cursor: auto;
        }
        // stylelint-enable plugin/selector-bem-pattern
    }

    &.box {
        @include mdc-ripple-surface;
        @include mdc-states(text-primary-on-light, $has-nested-focusable-element: true);
        @include mdc-ripple-radius;
        @include mdc-text-field-box-corner-radius($mdc-text-field-border-radius);
        display: inline-flex;
        position: relative;
        height: 56px;
        background-color: $mdc-text-field-box-background;
        overflow: hidden;
        @include mdc-theme-dark(".text-field", true) {
            background-color: $mdc-text-field-box-background-dark;
        }
        @include mdc-theme-dark(".text-field", true) {
            @include mdc-states(text-primary-on-dark, $has-nested-focusable-element: true);
        }
        // NOTE: For some reason, stylelint complains that the patterns below don't follow BEM.
        // However, it seems to emit the wrong selector for that pattern. Thus, we disable it above where
        // we would normally disable it (on combined selectors) as a workaround.
        // stylelint-disable plugin/selector-bem-pattern
        .input {
            align-self: flex-end;
            box-sizing: border-box;
            height: 100%;
            padding: 20px 16px 0;
        }

        .label {
            @include mdc-rtl-reflexive-position(left, 16px);
            position: absolute;
            bottom: 20px;
            width: calc(100% - #{$mdc-text-field-icon-padding});
            color: $mdc-text-field-box-secondary-text;
            text-overflow: ellipsis;
            white-space: nowrap;
            pointer-events: none;
            overflow: hidden;
            // Force the label into its own layer to prevent to prevent visible layer promotion adjustments
            // when the ripple is activated behind it.
            will-change: transform;
            @include mdc-theme-dark(".text-field") {
                @include mdc-theme-prop(color, text-secondary-on-dark);
            }

            &.float-above {
                transform: translateY(-50%) scale(.75, .75);
            }
        }

        .float-above {
            &.shake {
                animation: invalid-shake-float-above-box 250ms 1;
            }
        }

        &.disabled {
            @include mdc-theme-prop(color, $mdc-text-field-light-placeholder);
            border-bottom: none;
            background-color: $mdc-text-field-box-disabled-background;
            @include mdc-theme-dark(".text-field", true) {
                @include mdc-theme-prop(background-color, $mdc-text-field-dark-background);
                @include mdc-theme-prop(color, $mdc-text-field-dark-placeholder);
                border-bottom: none;
            }

            .label {
                bottom: 20px;
            }

            .icon {
                @include mdc-theme-prop(color, $mdc-text-field-disabled-icon-on-light);
                @include mdc-theme-dark() {
                    @include mdc-theme-prop(color, $mdc-text-field-disabled-icon-on-dark);
                }
            }
        }

        &.dense {
            .input {
                padding: 12px 12px 0;
            }

            .label {
                @include mdc-rtl-reflexive-position(left, 12px);
                bottom: 20px;

                &.float-above {
                    transform: translateY(calc(-75% - 2px)) scale(.923, .923);
                }
            }
        }
        // stylelint-enable plugin/selector-bem-pattern
    }

    &.with-leading-icon {
        .input {
            @include mdc-rtl-reflexive-property(padding, $mdc-text-field-icon-padding, $mdc-text-field-icon-position);
        }

        .icon {
            @include mdc-rtl-reflexive-position(left, $mdc-text-field-icon-position);
        }

        .label {
            @include mdc-rtl-reflexive-position(left, $mdc-text-field-icon-padding);
        }
    }

    &.with-trailing-icon {
        .input {
            @include mdc-rtl-reflexive-property(padding, $mdc-text-field-icon-position, $mdc-text-field-icon-padding);
        }

        .icon {
            @include mdc-rtl-reflexive-position(right, $mdc-text-field-icon-position);
        }
    }
    // stylelint-disable plugin/selector-bem-pattern
    &.with-leading-icon.dense .icon,
    &.with-trailing-icon.dense .icon {
        bottom: 16px;
        transform: scale(.8);
    }

    &.with-leading-icon.dense {
        .input {
            @include mdc-rtl-reflexive-property(padding, $mdc-text-field-dense-icon-padding, $mdc-text-field-dense-icon-position);
        }

        .icon {
            @include mdc-rtl-reflexive-position(left, $mdc-text-field-dense-icon-position);
        }

        .label {
            @include mdc-rtl-reflexive-position(left, $mdc-text-field-dense-icon-padding);
        }
    }

    &.with-trailing-icon.dense {
        .input {
            @include mdc-rtl-reflexive-property(padding, $mdc-text-field-dense-icon-position, $mdc-text-field-dense-icon-padding);
        }

        .icon {
            @include mdc-rtl-reflexive-position(right, $mdc-text-field-dense-icon-position);
        }
    }
    // stylelint-enable plugin/selector-bem-pattern
    &.upgraded:not(.fullwidth):not(.box) {
        display: inline-flex;
        position: relative;
        align-items: flex-end;
        box-sizing: border-box;

        &:not(.textarea) {
            height: 48px;
        }

        .label {
            pointer-events: none;
        }
    }

    &.invalid {
        .label {
            color: $mdc-text-field-error-on-light;
        }

        .input {
            border-color: $mdc-text-field-error-on-light;
        }

        .bottom-line {
            background-color: $mdc-text-field-error-on-light;
        }
    }
    // stylelint-disable plugin/selector-bem-pattern
    &.invalid.textarea {
        border-color: $mdc-text-field-error-on-light;
    }
    // stylelint-enable plugin/selector-bem-pattern
    &.dense {
        margin-top: 12px;
        margin-bottom: 4px;
        font-size: 0.813rem;

        .label.float-above {
            // NOTE: This is an eyeball'd approximation of what's in the mocks.
            transform: translateY(calc(-100% - 2px)) scale(.923, .923);
        }
    }

    &.disabled {
        pointer-events: none;

        .input {
            border-bottom: 1px dotted $mdc-text-field-disabled-border-on-light;
            @include mdc-theme-dark(".text-field", true) {
                border-bottom: 1px dotted $mdc-text-field-disabled-border-on-dark;
            }
        }
        // stylelint-disable plugin/selector-bem-pattern
        + .helper-text,
        .input,
        .label {
            @include mdc-theme-prop(color, text-disabled-on-light);
        }
        // stylelint-enable plugin/selector-bem-pattern
        .input,
        .label {
            @include mdc-theme-dark(".text-field") {
                @include mdc-theme-prop(color, text-disabled-on-dark);
            }
        }
        @include mdc-theme-dark(".text-field", true) {
            // stylelint-disable plugin/selector-bem-pattern
            + .helper-text {
                @include mdc-theme-prop(color, text-disabled-on-dark);
            }
            // stylelint-enable plugin/selector-bem-pattern
        }

        .label {
            bottom: 8px;
            cursor: default;
        }
    }

    .input:required + .label::after {
        margin-left: 1px;
        content: "*";

        &.focused & {
            color: $mdc-text-field-error-on-light;
            @include mdc-theme-dark(".text-field", true) {
                color: $mdc-text-field-error-on-dark;
            }
        }
    }

    &.textarea {
        @include mdc-text-field-textarea-corner-radius($mdc-text-field-border-radius);
        $padding-inset: 16px;
        $label-offset-y: $padding-inset + 2;
        $label-offset-x: $padding-inset;
        display: flex;
        height: initial;
        transition: none;
        border: 1px solid $mdc-textarea-border-on-light;
        overflow: hidden;
        @include mdc-theme-dark(".text-field") {
            border-color: $mdc-textarea-border-on-dark;
        }
        // stylelint-disable plugin/selector-bem-pattern
        .input {
            padding: $padding-inset * 2 $padding-inset $padding-inset;
            border: 1px solid transparent;

            &:focus {
                @include mdc-theme-prop(border-color, primary);
            }

            &:invalid:not(:focus) {
                border-color: $mdc-text-field-error-on-light;
            }
            @include mdc-theme-dark(".text-field") {
                &:hover {
                    border-bottom-color: transparent;
                }

                &:focus {
                    @include mdc-theme-prop(border-color, secondary);
                }

                &:invalid:not(:focus) {
                    border-color: $mdc-text-field-error-on-dark;
                }
            }
        }

        .label {
            @include mdc-rtl-reflexive-position(left, 1px);
            top: $label-offset-y;
            bottom: auto;
            padding: 8px 16px;
            background-color: $mdc-textarea-light-background;
            @include mdc-theme-dark(".text-field") {
                background-color: $mdc-textarea-dark-background;
            }

            &.float-above {
                // Translate above the top of the input, and compensate for the amount of offset needed
                // to position the label within the bounds of the inset padding.
                // Note that the scale factor is an eyeball'd approximation of what's shown in the mocks.
                transform: translateY(-50%) scale(.923, .923);
            }
        }

        &.disabled {
            border-style: solid;
            border-color: $mdc-text-field-disabled-border-on-light;
            background-color: $mdc-textarea-disabled-background-on-light;
            @include mdc-theme-dark(".text-field") {
                border-color: $mdc-text-field-disabled-border-on-dark;
                background-color: $mdc-textarea-disabled-background-on-dark;
            }

            .label {
                background-color: $mdc-textarea-disabled-background-on-light;
                @include mdc-theme-dark(".text-field") {
                    background-color: $mdc-textarea-disabled-background-on-dark;
                }
            }
        }

        &:not(.upgraded) {
            .input {
                padding-top: $padding-inset;
            }
        }
    }

    &.textarea.focused {
        @include mdc-theme-prop(border-color, primary);
    }
    // stylelint-enable plugin/selector-bem-pattern
    &.fullwidth {
        width: 100%;
        // stylelint-disable plugin/selector-bem-pattern
        &:not(.textarea) {
            display: block;
            box-sizing: border-box;
            height: 56px;
            margin: 0;
            border: none;
            border-bottom: 1px solid $mdc-text-field-divider-on-light;
            outline: none;

            .input {
                width: 100%;
                height: 100%;
                padding: 0;
                resize: none;
                // Use !important here to override all other border treatments
                border: none !important;
            }
        }
        @include mdc-theme-dark {
            border-bottom: 1px solid $mdc-text-field-divider-on-dark;
        }
        // stylelint-enable plugin/selector-bem-pattern
    }
}
// Graceful degredation for css-only inputs

.text-field {
    &:not(.upgraded):not(.textarea) .input {
        transition: mdc-text-field-transition(border-bottom-color);
        border-bottom: 1px solid $mdc-text-field-divider-on-light;
    }

    &:not(.upgraded) .input {
        &:focus {
            @include mdc-theme-prop(border-color, primary);
        }

        &:disabled {
            @include mdc-theme-prop(color, $mdc-text-field-dark-placeholder);
            border-bottom-style: dotted;
        }
        // stylelint-disable selector-max-specificity
        &:invalid:not(:focus) {
            border-color: $mdc-text-field-error-on-light;
        }
        // stylelint-enable selector-max-specificity
    }
    @include mdc-theme-dark {
        &:not(.upgraded) .input {
            &:not(:focus) {
                border-color: rgba(white, .12);
            }

            &:disabled {
                @include mdc-theme-prop(color, $mdc-text-field-dark-placeholder);
                border-color: $mdc-text-field-disabled-border-on-dark;
                background-color: $mdc-textarea-disabled-background-on-dark;
            }
            // stylelint-disable selector-max-specificity
            &:invalid:not(:focus) {
                border-color: $mdc-text-field-error-on-dark;
            }
            // stylelint-enable selector-max-specificity
        }
    }

    &.box:not(.upgraded) {
        height: 56px;

        &::after,
        &::before {
            border-radius: 0;
        }

        .input {
            padding-top: 0;
        }
    }
    // postcss-bem-linter: end
    // postcss-bem-linter: define helper-text
    .helper-text {
        // stylelint-disable plugin/selector-bem-pattern
        &.dense + & {
            margin-bottom: 4px;
        }

        &.focused + &:not(#{&}.validation-msg) {
            opacity: 1;
        }

        &.box + & {
            margin-right: 16px;
            margin-left: 16px;
        }
        // stylelint-enable plugin/selector-bem-pattern
    }
    // postcss-bem-linter: end
    &.invalid {
        + .helper-text.validation-msg {
            opacity: 1;
            color: $mdc-text-field-error-on-light;
        }
        @include mdc-theme-dark(".text-field", true) {
            + .helper-text.validation-msg {
                color: $mdc-text-field-error-on-dark;
            }
        }
    }
    // mdc-form-field tweaks to align text field label correctly
    // stylelint-disable selector-max-type
}

.form-field > .text-field + label {
    align-self: flex-start;
}
// stylelint-enable selector-max-type
